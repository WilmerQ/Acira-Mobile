{"version":3,"sources":["../../../src/@ionic-native/plugins/social-sharing/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\n/**\n * @name Social Sharing\n * @description\n * Share text, files, images, and links via social networks, sms, and email.\n *\n * For Browser usage check out the Web Share API docs: https://github.com/EddyVerbruggen/SocialSharing-PhoneGap-Plugin#web-share-api\n *\n * @usage\n * ```typescript\n * import { SocialSharing } from '@ionic-native/social-sharing';\n *\n * constructor(private socialSharing: SocialSharing) { }\n *\n * ...\n *\n * // Check if sharing via email is supported\n * this.socialSharing.canShareViaEmail().then(() => {\n *   // Sharing via email is possible\n * }).catch(() => {\n *   // Sharing via email is not possible\n * });\n *\n * // Share via email\n * this.socialSharing.shareViaEmail('Body', 'Subject', ['recipient@example.org']).then(() => {\n *   // Success!\n * }).catch(() => {\n *   // Error!\n * });\n * ```\n */\n@Plugin({\n  pluginName: 'SocialSharing',\n  plugin: 'cordova-plugin-x-socialsharing',\n  pluginRef: 'plugins.socialsharing',\n  repo: 'https://github.com/EddyVerbruggen/SocialSharing-PhoneGap-Plugin',\n  platforms: ['Android', 'Browser', 'iOS', 'Windows', 'Windows Phone']\n})\n\nexport class SocialSharing extends IonicNativePlugin {\n  /**\n   * Shares using the share sheet\n   * @param message {string} The message you would like to share.\n   * @param subject {string} The subject\n   * @param file {string|string[]} URL(s) to file(s) or image(s), local path(s) to file(s) or image(s), or base64 data of an image. Only the first file/image will be used on Windows Phone.\n   * @param url {string} A URL to share\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 4,\n    errorIndex: 5\n  })\n  share(\n    message?: string,\n    subject?: string,\n    file?: string | string[],\n    url?: string\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Shares using the share sheet with additional options and returns a result object or an error message (requires plugin version 5.1.0+)\n   * @param options {object} The options object with the message, subject, files, url and chooserTitle properties.\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS', 'Android']\n  })\n  shareWithOptions(options: {\n    message?: string;\n    subject?: string;\n    files?: string | string[];\n    url?: string;\n    chooserTitle?: string;\n  }): Promise<any> {\n    return;\n  }\n\n  /**\n   * Checks if you can share via a specific app.\n   * @param appName {string} App name or package name. Examples: instagram or com.apple.social.facebook\n   * @param message {string}\n   * @param subject {string}\n   * @param image {string}\n   * @param url {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 5,\n    errorIndex: 6,\n    platforms: ['iOS', 'Android']\n  })\n  canShareVia(\n    appName: string,\n    message?: string,\n    subject?: string,\n    image?: string,\n    url?: string\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Shares directly to Twitter\n   * @param message {string}\n   * @param image {string}\n   * @param url {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 3,\n    errorIndex: 4,\n    platforms: ['iOS', 'Android']\n  })\n  shareViaTwitter(message: string, image?: string, url?: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Shares directly to Facebook\n   * @param message {string}\n   * @param image {string}\n   * @param url {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 3,\n    errorIndex: 4,\n    platforms: ['iOS', 'Android']\n  })\n  shareViaFacebook(\n    message: string,\n    image?: string,\n    url?: string\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Shares directly to Facebook with a paste message hint\n   * @param message {string}\n   * @param image {string}\n   * @param url {string}\n   * @param pasteMessageHint {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 4,\n    errorIndex: 5,\n    platforms: ['iOS', 'Android']\n  })\n  shareViaFacebookWithPasteMessageHint(\n    message: string,\n    image?: string,\n    url?: string,\n    pasteMessageHint?: string\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Shares directly to Instagram\n   * @param message {string}\n   * @param image {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS', 'Android']\n  })\n  shareViaInstagram(message: string, image: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Shares directly to WhatsApp\n   * @param message {string}\n   * @param image {string}\n   * @param url {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 3,\n    errorIndex: 4,\n    platforms: ['iOS', 'Android']\n  })\n  shareViaWhatsApp(\n    message: string,\n    image?: string,\n    url?: string\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Shares directly to a WhatsApp Contact\n   * @param receiver {string} Pass phone number on Android, and Addressbook ID (abid) on iOS\n   * @param message {string} Message to send\n   * @param image {string} Image to send (does not work on iOS\n   * @param url {string} Link to send\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 4,\n    errorIndex: 5,\n    platforms: ['iOS', 'Android']\n  })\n  shareViaWhatsAppToReceiver(\n    receiver: string,\n    message: string,\n    image?: string,\n    url?: string\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Share via SMS\n   * @param messge {string} message to send\n   * @param phoneNumber {string} Number or multiple numbers seperated by commas\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS', 'Android']\n  })\n  shareViaSMS(messge: string, phoneNumber: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Checks if you can share via email\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS', 'Android']\n  })\n  canShareViaEmail(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Share via Email\n   * @param message {string}\n   * @param subject {string}\n   * @param to {string[]}\n   * @param cc {string[]} Optional\n   * @param bcc {string[]} Optional\n   * @param files {string|string[]} Optional URL or local path to file(s) to attach\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS', 'Android'],\n    successIndex: 6,\n    errorIndex: 7\n  })\n  shareViaEmail(\n    message: string,\n    subject: string,\n    to: string[],\n    cc?: string[],\n    bcc?: string[],\n    files?: string | string[]\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Share via AppName\n   * @param appName {string} App name or package name. Examples: instagram or com.apple.social.facebook\n   * @param message {string}\n   * @param subject {string}\n   * @param image {string}\n   * @param url {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 5,\n    errorIndex: 6,\n    platforms: ['iOS', 'Android']\n  })\n  shareVia(\n    appName: string,\n    message: string,\n    subject?: string,\n    image?: string,\n    url?: string\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * defines the popup position before call the share method.\n   * @param targetBounds {string} left, top, width, height\n   */\n  @Cordova({\n    sync: true,\n    platforms: ['iOS']\n  })\n  setIPadPopupCoordinates(targetBounds: string): void {}\n\n  /**\n   * Save an array of images to the camera roll\n   * @param  {string|string[]} fileOrFileArray Single or multiple files\n   * @returns {Promise<any> }\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  saveToPhotoAlbum(fileOrFileArray: string | string[]): Promise<any> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}